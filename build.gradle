//  Modified version of Sqaaakoi's original build script, original here https://github.com/TangleProject/TemplateMod/blob/main/build.gradle

plugins {
  id 'fabric-loom' version '1.7-SNAPSHOT'
  id 'maven-publish'
}

import groovy.json.JsonSlurper

//  Configuration
def config = (new JsonSlurper()).parseText(new File("./config.json").text)

//  Mod metadata
def mod = [
        id: config.get("mod").get("id"),
        name: config.get("mod").get("name"),
        version: config.get("mod").get("version")
]

//  Package name
def packageGroup = config.get("package") + "." + mod.id

//  Versions
def dependency_versions = [
        minecraft: config.get("dependencies").get("minecraft"),
        mappings: config.get("dependencies").get("mappings"),
        fabric_loader: config.get("dependencies").get("fabric_loader"),
        fabric_api: config.get("dependencies").get("fabric_api"),
        modmenu: config.get("dependencies").get("modmenu")
]

//  Build time
def date = new Date()
def version_time = date.format("dd-MM-yyyy'-'HH-mm-ss")
def folder_time = date.format("dd-MM-yyyy'/'HH-mm-ss")

// Username
boolean enableUsername = config.get("enable_username")
def username = ""

if (enableUsername) {
  username = System.getProperty("user.name").replaceAll(" ", "_")
  username = username.substring(0, Math.min(username.length(), 16));
} else {
  username = "";
}

//  Setup run folder from template
if (!file('runClient').exists()) {
  copy {
    from("run_template")
    into("runClient")
  }
}

def release = project.getProperties().get("release") != null

version = mod.version + (release ? "" : "+" + version_time)
group = packageGroup
archivesBaseName = mod.id
libsDirName = "../build/${folder_time}"

compileJava {
  options.compilerArgs << "-Xlint"
  options.compilerArgs << "-Xlint:-processing"
}

repositories {
  flatDir {
    dirs 'libs'
  }
  for (i in config.get("dependencies").get("maven_repositories")) {
    maven {
      url = i
    }
  }
}

dependencies {
  // Nullable annotations
  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  // To change the versions see the dependency_versions object
  minecraft "com.mojang:minecraft:${dependency_versions.minecraft}"
  mappings "net.fabricmc:yarn:${dependency_versions.mappings}" + ":v2"
  modImplementation "net.fabricmc:fabric-loader:${dependency_versions.fabric_loader}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${dependency_versions.fabric_api}"

  for (i in config.get("dependencies").get("libraries")) {
    modImplementation i
  }
  for (i in config.get("dependencies").get("libraries_compile")) {
    modCompile i
  }
  for (libfile in config.get("dependencies").get("library_files")) {
    modImplementation name: libfile
    modCompile name: libfile
  }

  // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
  // You may need to force-disable transitiveness on them.
}

loom {
  def awf = file("src/main/resources/${mod.id}.accesswidener")
  if (awf.exists()) {
    if (!awf.text.replace("\n", "").replace("\r", "").replace(" ", "").isEmpty()) {
      accessWidenerPath = awf
    }
  }
  runs {
    client {
      inherit client
      name = "Run Client"
      runDir "runClient"
      // remapArchives = true
      if (username.length() > 0) {
        programArgs "--username", username
      }
    }
    server {
      inherit server
      name = "Run Server"
      runDir "runServer"
      // remapArchives = true
    }
  }
}

processResources {
  filesMatching("fabric.mod.json") {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            "mod_id": mod.id,
            "mod_name": mod.name,
            "package": packageGroup,
            "minecraft_version": dependency_versions.minecraft,
            "version": project.version
    ])
  }
  filesMatching(mod.id + ".mixins.json") {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            "package": packageGroup
    ])
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 21
}

java {
  withSourcesJar()

  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

jar {
  from("LICENSE") {
    rename { "${it}_${project.archivesBaseName}"}
  }
}